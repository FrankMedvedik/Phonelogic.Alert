//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Phonelogic.Alert.ProdServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobSummary", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class JobSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AbandonedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InQueueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InboundCallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeftMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoAgentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OutboundCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlacedCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TollFreeNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Abandoned {
            get {
                return this.AbandonedField;
            }
            set {
                if ((this.AbandonedField.Equals(value) != true)) {
                    this.AbandonedField = value;
                    this.RaisePropertyChanged("Abandoned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Callback {
            get {
                return this.CallbackField;
            }
            set {
                if ((this.CallbackField.Equals(value) != true)) {
                    this.CallbackField = value;
                    this.RaisePropertyChanged("Callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InQueue {
            get {
                return this.InQueueField;
            }
            set {
                if ((this.InQueueField.Equals(value) != true)) {
                    this.InQueueField = value;
                    this.RaisePropertyChanged("InQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InboundCalls {
            get {
                return this.InboundCallsField;
            }
            set {
                if ((this.InboundCallsField.Equals(value) != true)) {
                    this.InboundCallsField = value;
                    this.RaisePropertyChanged("InboundCalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeftMessage {
            get {
                return this.LeftMessageField;
            }
            set {
                if ((this.LeftMessageField.Equals(value) != true)) {
                    this.LeftMessageField = value;
                    this.RaisePropertyChanged("LeftMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoAgents {
            get {
                return this.NoAgentsField;
            }
            set {
                if ((this.NoAgentsField.Equals(value) != true)) {
                    this.NoAgentsField = value;
                    this.RaisePropertyChanged("NoAgents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutboundCall {
            get {
                return this.OutboundCallField;
            }
            set {
                if ((this.OutboundCallField.Equals(value) != true)) {
                    this.OutboundCallField = value;
                    this.RaisePropertyChanged("OutboundCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlacedCall {
            get {
                return this.PlacedCallField;
            }
            set {
                if ((this.PlacedCallField.Equals(value) != true)) {
                    this.PlacedCallField = value;
                    this.RaisePropertyChanged("PlacedCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TollFreeNumber {
            get {
                return this.TollFreeNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TollFreeNumberField, value) != true)) {
                    this.TollFreeNumberField = value;
                    this.RaisePropertyChanged("TollFreeNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueDetail", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class QueueDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeInField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerId {
            get {
                return this.CallerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIdField, value) != true)) {
                    this.CallerIdField = value;
                    this.RaisePropertyChanged("CallerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeIn {
            get {
                return this.TimeInField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeInField, value) != true)) {
                    this.TimeInField = value;
                    this.RaisePropertyChanged("TimeIn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueSummary", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class QueueSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InQueueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InQueue {
            get {
                return this.InQueueField;
            }
            set {
                if ((this.InQueueField.Equals(value) != true)) {
                    this.InQueueField = value;
                    this.RaisePropertyChanged("InQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveCall", Namespace="http://schemas.datacontract.org/2004/07/PhoneLogic.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ActiveCall : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConferenceUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecruiterUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeInField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallerId {
            get {
                return this.CallerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CallerIdField, value) != true)) {
                    this.CallerIdField = value;
                    this.RaisePropertyChanged("CallerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConferenceUri {
            get {
                return this.ConferenceUriField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceUriField, value) != true)) {
                    this.ConferenceUriField = value;
                    this.RaisePropertyChanged("ConferenceUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobNumber {
            get {
                return this.JobNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNumberField, value) != true)) {
                    this.JobNumberField = value;
                    this.RaisePropertyChanged("JobNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecruiterUri {
            get {
                return this.RecruiterUriField;
            }
            set {
                if ((object.ReferenceEquals(this.RecruiterUriField, value) != true)) {
                    this.RecruiterUriField = value;
                    this.RaisePropertyChanged("RecruiterUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeIn {
            get {
                return this.TimeInField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeInField, value) != true)) {
                    this.TimeInField = value;
                    this.RaisePropertyChanged("TimeIn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://reckner.phonelogic.windowsservice", ConfigurationName="ProdServiceReference.IPhoneLogicService")]
    public interface IPhoneLogicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummaryResponse" +
            "")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> GetJobSummary();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetJobSummaryResponse" +
            "")]
        System.IAsyncResult BeginGetJobSummary(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> EndGetJobSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetailRespons" +
            "e")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetQueueDetail(string jobNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetQueueDetailRespons" +
            "e")]
        System.IAsyncResult BeginGetQueueDetail(string jobNumber, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetQueueDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueueRes" +
            "ponse")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetAllCallsInQueue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetAllCallsInQueueRes" +
            "ponse")]
        System.IAsyncResult BeginGetAllCallsInQueue(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetAllCallsInQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCallsRespo" +
            "nse")]
        int GetMyQueuedCalls(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueuedCallsRespo" +
            "nse")]
        System.IAsyncResult BeginGetMyQueuedCalls(string sipAddress, System.AsyncCallback callback, object asyncState);
        
        int EndGetMyQueuedCalls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummaryResp" +
            "onse")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> GetMyQueueSummary(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummary", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueSummaryResp" +
            "onse")]
        System.IAsyncResult BeginGetMyQueueSummary(string sipAddress, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> EndGetMyQueueSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetailRespo" +
            "nse")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetMyQueueDetail(string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetail", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetMyQueueDetailRespo" +
            "nse")]
        System.IAsyncResult BeginGetMyQueueDetail(string sipAddress, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetMyQueueDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnline", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnlineRe" +
            "sponse")]
        System.Collections.Generic.List<string> GetRecruitersOnline();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnline", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersOnlineRe" +
            "sponse")]
        System.IAsyncResult BeginGetRecruitersOnline(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetRecruitersOnline(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "e", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "eResponse")]
        System.Collections.Generic.List<string> GetRecruitersAvailable();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "e", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetRecruitersAvailabl" +
            "eResponse")]
        System.IAsyncResult BeginGetRecruitersAvailable(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetRecruitersAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCallsRespons" +
            "e")]
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> GetActiveCalls();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCalls", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/GetActiveCallsRespons" +
            "e")]
        System.IAsyncResult BeginGetActiveCalls(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> EndGetActiveCalls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReady", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReadyResponse")]
        void ForceReady(string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReady", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/ForceReadyResponse")]
        System.IAsyncResult BeginForceReady(string recruiterUri, System.AsyncCallback callback, object asyncState);
        
        void EndForceReady(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueueResponse" +
            "")]
        void PullFromQueue(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/PullFromQueueResponse" +
            "")]
        System.IAsyncResult BeginPullFromQueue(string id, string recruiterUri, System.AsyncCallback callback, object asyncState);
        
        void EndPullFromQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOut", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOutRespo" +
            "nse")]
        void RecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOut", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/RecruiterDialOutRespo" +
            "nse")]
        System.IAsyncResult BeginRecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId, System.AsyncCallback callback, object asyncState);
        
        void EndRecruiterDialOut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCallResponse")]
        void TransferCall(string id, string recruiterUri);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/TransferCallResponse")]
        System.IAsyncResult BeginTransferCall(string id, string recruiterUri, System.AsyncCallback callback, object asyncState);
        
        void EndTransferCall(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCallResp" +
            "onse")]
        void SilentMonitorCall(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/SilentMonitorCallResp" +
            "onse")]
        System.IAsyncResult BeginSilentMonitorCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndSilentMonitorCall(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCallResponse" +
            "")]
        void BargeIntoCall(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCall", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/BargeIntoCallResponse" +
            "")]
        System.IAsyncResult BeginBargeIntoCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndBargeIntoCall(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueueRe" +
            "sponse")]
        void DispatchCallInQueue(string id, string sipAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueue", ReplyAction="http://reckner.phonelogic.windowsservice/IPhoneLogicService/DispatchCallInQueueRe" +
            "sponse")]
        System.IAsyncResult BeginDispatchCallInQueue(string id, string sipAddress, System.AsyncCallback callback, object asyncState);
        
        void EndDispatchCallInQueue(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhoneLogicServiceChannel : Phonelogic.Alert.ProdServiceReference.IPhoneLogicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJobSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJobSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueueDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueueDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCallsInQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCallsInQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyQueuedCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyQueuedCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyQueueSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyQueueSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyQueueDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyQueueDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecruitersOnlineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecruitersOnlineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecruitersAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecruitersAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActiveCallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActiveCallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhoneLogicServiceClient : System.ServiceModel.ClientBase<Phonelogic.Alert.ProdServiceReference.IPhoneLogicService>, Phonelogic.Alert.ProdServiceReference.IPhoneLogicService {
        
        private BeginOperationDelegate onBeginGetJobSummaryDelegate;
        
        private EndOperationDelegate onEndGetJobSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetJobSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueueDetailDelegate;
        
        private EndOperationDelegate onEndGetQueueDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueueDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCallsInQueueDelegate;
        
        private EndOperationDelegate onEndGetAllCallsInQueueDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCallsInQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyQueuedCallsDelegate;
        
        private EndOperationDelegate onEndGetMyQueuedCallsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyQueuedCallsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyQueueSummaryDelegate;
        
        private EndOperationDelegate onEndGetMyQueueSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyQueueSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyQueueDetailDelegate;
        
        private EndOperationDelegate onEndGetMyQueueDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyQueueDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecruitersOnlineDelegate;
        
        private EndOperationDelegate onEndGetRecruitersOnlineDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecruitersOnlineCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecruitersAvailableDelegate;
        
        private EndOperationDelegate onEndGetRecruitersAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecruitersAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActiveCallsDelegate;
        
        private EndOperationDelegate onEndGetActiveCallsDelegate;
        
        private System.Threading.SendOrPostCallback onGetActiveCallsCompletedDelegate;
        
        private BeginOperationDelegate onBeginForceReadyDelegate;
        
        private EndOperationDelegate onEndForceReadyDelegate;
        
        private System.Threading.SendOrPostCallback onForceReadyCompletedDelegate;
        
        private BeginOperationDelegate onBeginPullFromQueueDelegate;
        
        private EndOperationDelegate onEndPullFromQueueDelegate;
        
        private System.Threading.SendOrPostCallback onPullFromQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecruiterDialOutDelegate;
        
        private EndOperationDelegate onEndRecruiterDialOutDelegate;
        
        private System.Threading.SendOrPostCallback onRecruiterDialOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransferCallDelegate;
        
        private EndOperationDelegate onEndTransferCallDelegate;
        
        private System.Threading.SendOrPostCallback onTransferCallCompletedDelegate;
        
        private BeginOperationDelegate onBeginSilentMonitorCallDelegate;
        
        private EndOperationDelegate onEndSilentMonitorCallDelegate;
        
        private System.Threading.SendOrPostCallback onSilentMonitorCallCompletedDelegate;
        
        private BeginOperationDelegate onBeginBargeIntoCallDelegate;
        
        private EndOperationDelegate onEndBargeIntoCallDelegate;
        
        private System.Threading.SendOrPostCallback onBargeIntoCallCompletedDelegate;
        
        private BeginOperationDelegate onBeginDispatchCallInQueueDelegate;
        
        private EndOperationDelegate onEndDispatchCallInQueueDelegate;
        
        private System.Threading.SendOrPostCallback onDispatchCallInQueueCompletedDelegate;
        
        public PhoneLogicServiceClient() {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneLogicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetJobSummaryCompletedEventArgs> GetJobSummaryCompleted;
        
        public event System.EventHandler<GetQueueDetailCompletedEventArgs> GetQueueDetailCompleted;
        
        public event System.EventHandler<GetAllCallsInQueueCompletedEventArgs> GetAllCallsInQueueCompleted;
        
        public event System.EventHandler<GetMyQueuedCallsCompletedEventArgs> GetMyQueuedCallsCompleted;
        
        public event System.EventHandler<GetMyQueueSummaryCompletedEventArgs> GetMyQueueSummaryCompleted;
        
        public event System.EventHandler<GetMyQueueDetailCompletedEventArgs> GetMyQueueDetailCompleted;
        
        public event System.EventHandler<GetRecruitersOnlineCompletedEventArgs> GetRecruitersOnlineCompleted;
        
        public event System.EventHandler<GetRecruitersAvailableCompletedEventArgs> GetRecruitersAvailableCompleted;
        
        public event System.EventHandler<GetActiveCallsCompletedEventArgs> GetActiveCallsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ForceReadyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PullFromQueueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RecruiterDialOutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TransferCallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SilentMonitorCallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BargeIntoCallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DispatchCallInQueueCompleted;
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> GetJobSummary() {
            return base.Channel.GetJobSummary();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetJobSummary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJobSummary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> EndGetJobSummary(System.IAsyncResult result) {
            return base.Channel.EndGetJobSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetJobSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetJobSummary(callback, asyncState);
        }
        
        private object[] OnEndGetJobSummary(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.JobSummary> retVal = this.EndGetJobSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJobSummaryCompleted(object state) {
            if ((this.GetJobSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJobSummaryCompleted(this, new GetJobSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJobSummaryAsync() {
            this.GetJobSummaryAsync(null);
        }
        
        public void GetJobSummaryAsync(object userState) {
            if ((this.onBeginGetJobSummaryDelegate == null)) {
                this.onBeginGetJobSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetJobSummary);
            }
            if ((this.onEndGetJobSummaryDelegate == null)) {
                this.onEndGetJobSummaryDelegate = new EndOperationDelegate(this.OnEndGetJobSummary);
            }
            if ((this.onGetJobSummaryCompletedDelegate == null)) {
                this.onGetJobSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJobSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetJobSummaryDelegate, null, this.onEndGetJobSummaryDelegate, this.onGetJobSummaryCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetQueueDetail(string jobNumber) {
            return base.Channel.GetQueueDetail(jobNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQueueDetail(string jobNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueueDetail(jobNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetQueueDetail(System.IAsyncResult result) {
            return base.Channel.EndGetQueueDetail(result);
        }
        
        private System.IAsyncResult OnBeginGetQueueDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string jobNumber = ((string)(inValues[0]));
            return this.BeginGetQueueDetail(jobNumber, callback, asyncState);
        }
        
        private object[] OnEndGetQueueDetail(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> retVal = this.EndGetQueueDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueueDetailCompleted(object state) {
            if ((this.GetQueueDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueueDetailCompleted(this, new GetQueueDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueueDetailAsync(string jobNumber) {
            this.GetQueueDetailAsync(jobNumber, null);
        }
        
        public void GetQueueDetailAsync(string jobNumber, object userState) {
            if ((this.onBeginGetQueueDetailDelegate == null)) {
                this.onBeginGetQueueDetailDelegate = new BeginOperationDelegate(this.OnBeginGetQueueDetail);
            }
            if ((this.onEndGetQueueDetailDelegate == null)) {
                this.onEndGetQueueDetailDelegate = new EndOperationDelegate(this.OnEndGetQueueDetail);
            }
            if ((this.onGetQueueDetailCompletedDelegate == null)) {
                this.onGetQueueDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueueDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueueDetailDelegate, new object[] {
                        jobNumber}, this.onEndGetQueueDetailDelegate, this.onGetQueueDetailCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetAllCallsInQueue() {
            return base.Channel.GetAllCallsInQueue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCallsInQueue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCallsInQueue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetAllCallsInQueue(System.IAsyncResult result) {
            return base.Channel.EndGetAllCallsInQueue(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCallsInQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllCallsInQueue(callback, asyncState);
        }
        
        private object[] OnEndGetAllCallsInQueue(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> retVal = this.EndGetAllCallsInQueue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCallsInQueueCompleted(object state) {
            if ((this.GetAllCallsInQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCallsInQueueCompleted(this, new GetAllCallsInQueueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCallsInQueueAsync() {
            this.GetAllCallsInQueueAsync(null);
        }
        
        public void GetAllCallsInQueueAsync(object userState) {
            if ((this.onBeginGetAllCallsInQueueDelegate == null)) {
                this.onBeginGetAllCallsInQueueDelegate = new BeginOperationDelegate(this.OnBeginGetAllCallsInQueue);
            }
            if ((this.onEndGetAllCallsInQueueDelegate == null)) {
                this.onEndGetAllCallsInQueueDelegate = new EndOperationDelegate(this.OnEndGetAllCallsInQueue);
            }
            if ((this.onGetAllCallsInQueueCompletedDelegate == null)) {
                this.onGetAllCallsInQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCallsInQueueCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCallsInQueueDelegate, null, this.onEndGetAllCallsInQueueDelegate, this.onGetAllCallsInQueueCompletedDelegate, userState);
        }
        
        public int GetMyQueuedCalls(string sipAddress) {
            return base.Channel.GetMyQueuedCalls(sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyQueuedCalls(string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyQueuedCalls(sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetMyQueuedCalls(System.IAsyncResult result) {
            return base.Channel.EndGetMyQueuedCalls(result);
        }
        
        private System.IAsyncResult OnBeginGetMyQueuedCalls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sipAddress = ((string)(inValues[0]));
            return this.BeginGetMyQueuedCalls(sipAddress, callback, asyncState);
        }
        
        private object[] OnEndGetMyQueuedCalls(System.IAsyncResult result) {
            int retVal = this.EndGetMyQueuedCalls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyQueuedCallsCompleted(object state) {
            if ((this.GetMyQueuedCallsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyQueuedCallsCompleted(this, new GetMyQueuedCallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyQueuedCallsAsync(string sipAddress) {
            this.GetMyQueuedCallsAsync(sipAddress, null);
        }
        
        public void GetMyQueuedCallsAsync(string sipAddress, object userState) {
            if ((this.onBeginGetMyQueuedCallsDelegate == null)) {
                this.onBeginGetMyQueuedCallsDelegate = new BeginOperationDelegate(this.OnBeginGetMyQueuedCalls);
            }
            if ((this.onEndGetMyQueuedCallsDelegate == null)) {
                this.onEndGetMyQueuedCallsDelegate = new EndOperationDelegate(this.OnEndGetMyQueuedCalls);
            }
            if ((this.onGetMyQueuedCallsCompletedDelegate == null)) {
                this.onGetMyQueuedCallsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyQueuedCallsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyQueuedCallsDelegate, new object[] {
                        sipAddress}, this.onEndGetMyQueuedCallsDelegate, this.onGetMyQueuedCallsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> GetMyQueueSummary(string sipAddress) {
            return base.Channel.GetMyQueueSummary(sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyQueueSummary(string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyQueueSummary(sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> EndGetMyQueueSummary(System.IAsyncResult result) {
            return base.Channel.EndGetMyQueueSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetMyQueueSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sipAddress = ((string)(inValues[0]));
            return this.BeginGetMyQueueSummary(sipAddress, callback, asyncState);
        }
        
        private object[] OnEndGetMyQueueSummary(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueSummary> retVal = this.EndGetMyQueueSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyQueueSummaryCompleted(object state) {
            if ((this.GetMyQueueSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyQueueSummaryCompleted(this, new GetMyQueueSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyQueueSummaryAsync(string sipAddress) {
            this.GetMyQueueSummaryAsync(sipAddress, null);
        }
        
        public void GetMyQueueSummaryAsync(string sipAddress, object userState) {
            if ((this.onBeginGetMyQueueSummaryDelegate == null)) {
                this.onBeginGetMyQueueSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetMyQueueSummary);
            }
            if ((this.onEndGetMyQueueSummaryDelegate == null)) {
                this.onEndGetMyQueueSummaryDelegate = new EndOperationDelegate(this.OnEndGetMyQueueSummary);
            }
            if ((this.onGetMyQueueSummaryCompletedDelegate == null)) {
                this.onGetMyQueueSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyQueueSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyQueueSummaryDelegate, new object[] {
                        sipAddress}, this.onEndGetMyQueueSummaryDelegate, this.onGetMyQueueSummaryCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> GetMyQueueDetail(string sipAddress) {
            return base.Channel.GetMyQueueDetail(sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyQueueDetail(string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyQueueDetail(sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> EndGetMyQueueDetail(System.IAsyncResult result) {
            return base.Channel.EndGetMyQueueDetail(result);
        }
        
        private System.IAsyncResult OnBeginGetMyQueueDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sipAddress = ((string)(inValues[0]));
            return this.BeginGetMyQueueDetail(sipAddress, callback, asyncState);
        }
        
        private object[] OnEndGetMyQueueDetail(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.QueueDetail> retVal = this.EndGetMyQueueDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyQueueDetailCompleted(object state) {
            if ((this.GetMyQueueDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyQueueDetailCompleted(this, new GetMyQueueDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyQueueDetailAsync(string sipAddress) {
            this.GetMyQueueDetailAsync(sipAddress, null);
        }
        
        public void GetMyQueueDetailAsync(string sipAddress, object userState) {
            if ((this.onBeginGetMyQueueDetailDelegate == null)) {
                this.onBeginGetMyQueueDetailDelegate = new BeginOperationDelegate(this.OnBeginGetMyQueueDetail);
            }
            if ((this.onEndGetMyQueueDetailDelegate == null)) {
                this.onEndGetMyQueueDetailDelegate = new EndOperationDelegate(this.OnEndGetMyQueueDetail);
            }
            if ((this.onGetMyQueueDetailCompletedDelegate == null)) {
                this.onGetMyQueueDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyQueueDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyQueueDetailDelegate, new object[] {
                        sipAddress}, this.onEndGetMyQueueDetailDelegate, this.onGetMyQueueDetailCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetRecruitersOnline() {
            return base.Channel.GetRecruitersOnline();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRecruitersOnline(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecruitersOnline(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetRecruitersOnline(System.IAsyncResult result) {
            return base.Channel.EndGetRecruitersOnline(result);
        }
        
        private System.IAsyncResult OnBeginGetRecruitersOnline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRecruitersOnline(callback, asyncState);
        }
        
        private object[] OnEndGetRecruitersOnline(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetRecruitersOnline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecruitersOnlineCompleted(object state) {
            if ((this.GetRecruitersOnlineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecruitersOnlineCompleted(this, new GetRecruitersOnlineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecruitersOnlineAsync() {
            this.GetRecruitersOnlineAsync(null);
        }
        
        public void GetRecruitersOnlineAsync(object userState) {
            if ((this.onBeginGetRecruitersOnlineDelegate == null)) {
                this.onBeginGetRecruitersOnlineDelegate = new BeginOperationDelegate(this.OnBeginGetRecruitersOnline);
            }
            if ((this.onEndGetRecruitersOnlineDelegate == null)) {
                this.onEndGetRecruitersOnlineDelegate = new EndOperationDelegate(this.OnEndGetRecruitersOnline);
            }
            if ((this.onGetRecruitersOnlineCompletedDelegate == null)) {
                this.onGetRecruitersOnlineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecruitersOnlineCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecruitersOnlineDelegate, null, this.onEndGetRecruitersOnlineDelegate, this.onGetRecruitersOnlineCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetRecruitersAvailable() {
            return base.Channel.GetRecruitersAvailable();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRecruitersAvailable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecruitersAvailable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetRecruitersAvailable(System.IAsyncResult result) {
            return base.Channel.EndGetRecruitersAvailable(result);
        }
        
        private System.IAsyncResult OnBeginGetRecruitersAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRecruitersAvailable(callback, asyncState);
        }
        
        private object[] OnEndGetRecruitersAvailable(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetRecruitersAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecruitersAvailableCompleted(object state) {
            if ((this.GetRecruitersAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecruitersAvailableCompleted(this, new GetRecruitersAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecruitersAvailableAsync() {
            this.GetRecruitersAvailableAsync(null);
        }
        
        public void GetRecruitersAvailableAsync(object userState) {
            if ((this.onBeginGetRecruitersAvailableDelegate == null)) {
                this.onBeginGetRecruitersAvailableDelegate = new BeginOperationDelegate(this.OnBeginGetRecruitersAvailable);
            }
            if ((this.onEndGetRecruitersAvailableDelegate == null)) {
                this.onEndGetRecruitersAvailableDelegate = new EndOperationDelegate(this.OnEndGetRecruitersAvailable);
            }
            if ((this.onGetRecruitersAvailableCompletedDelegate == null)) {
                this.onGetRecruitersAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecruitersAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecruitersAvailableDelegate, null, this.onEndGetRecruitersAvailableDelegate, this.onGetRecruitersAvailableCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> GetActiveCalls() {
            return base.Channel.GetActiveCalls();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActiveCalls(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActiveCalls(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> EndGetActiveCalls(System.IAsyncResult result) {
            return base.Channel.EndGetActiveCalls(result);
        }
        
        private System.IAsyncResult OnBeginGetActiveCalls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetActiveCalls(callback, asyncState);
        }
        
        private object[] OnEndGetActiveCalls(System.IAsyncResult result) {
            System.Collections.Generic.List<Phonelogic.Alert.ProdServiceReference.ActiveCall> retVal = this.EndGetActiveCalls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActiveCallsCompleted(object state) {
            if ((this.GetActiveCallsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActiveCallsCompleted(this, new GetActiveCallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActiveCallsAsync() {
            this.GetActiveCallsAsync(null);
        }
        
        public void GetActiveCallsAsync(object userState) {
            if ((this.onBeginGetActiveCallsDelegate == null)) {
                this.onBeginGetActiveCallsDelegate = new BeginOperationDelegate(this.OnBeginGetActiveCalls);
            }
            if ((this.onEndGetActiveCallsDelegate == null)) {
                this.onEndGetActiveCallsDelegate = new EndOperationDelegate(this.OnEndGetActiveCalls);
            }
            if ((this.onGetActiveCallsCompletedDelegate == null)) {
                this.onGetActiveCallsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActiveCallsCompleted);
            }
            base.InvokeAsync(this.onBeginGetActiveCallsDelegate, null, this.onEndGetActiveCallsDelegate, this.onGetActiveCallsCompletedDelegate, userState);
        }
        
        public void ForceReady(string recruiterUri) {
            base.Channel.ForceReady(recruiterUri);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginForceReady(string recruiterUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForceReady(recruiterUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndForceReady(System.IAsyncResult result) {
            base.Channel.EndForceReady(result);
        }
        
        private System.IAsyncResult OnBeginForceReady(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string recruiterUri = ((string)(inValues[0]));
            return this.BeginForceReady(recruiterUri, callback, asyncState);
        }
        
        private object[] OnEndForceReady(System.IAsyncResult result) {
            this.EndForceReady(result);
            return null;
        }
        
        private void OnForceReadyCompleted(object state) {
            if ((this.ForceReadyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForceReadyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForceReadyAsync(string recruiterUri) {
            this.ForceReadyAsync(recruiterUri, null);
        }
        
        public void ForceReadyAsync(string recruiterUri, object userState) {
            if ((this.onBeginForceReadyDelegate == null)) {
                this.onBeginForceReadyDelegate = new BeginOperationDelegate(this.OnBeginForceReady);
            }
            if ((this.onEndForceReadyDelegate == null)) {
                this.onEndForceReadyDelegate = new EndOperationDelegate(this.OnEndForceReady);
            }
            if ((this.onForceReadyCompletedDelegate == null)) {
                this.onForceReadyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForceReadyCompleted);
            }
            base.InvokeAsync(this.onBeginForceReadyDelegate, new object[] {
                        recruiterUri}, this.onEndForceReadyDelegate, this.onForceReadyCompletedDelegate, userState);
        }
        
        public void PullFromQueue(string id, string recruiterUri) {
            base.Channel.PullFromQueue(id, recruiterUri);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPullFromQueue(string id, string recruiterUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPullFromQueue(id, recruiterUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPullFromQueue(System.IAsyncResult result) {
            base.Channel.EndPullFromQueue(result);
        }
        
        private System.IAsyncResult OnBeginPullFromQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string recruiterUri = ((string)(inValues[1]));
            return this.BeginPullFromQueue(id, recruiterUri, callback, asyncState);
        }
        
        private object[] OnEndPullFromQueue(System.IAsyncResult result) {
            this.EndPullFromQueue(result);
            return null;
        }
        
        private void OnPullFromQueueCompleted(object state) {
            if ((this.PullFromQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PullFromQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PullFromQueueAsync(string id, string recruiterUri) {
            this.PullFromQueueAsync(id, recruiterUri, null);
        }
        
        public void PullFromQueueAsync(string id, string recruiterUri, object userState) {
            if ((this.onBeginPullFromQueueDelegate == null)) {
                this.onBeginPullFromQueueDelegate = new BeginOperationDelegate(this.OnBeginPullFromQueue);
            }
            if ((this.onEndPullFromQueueDelegate == null)) {
                this.onEndPullFromQueueDelegate = new EndOperationDelegate(this.OnEndPullFromQueue);
            }
            if ((this.onPullFromQueueCompletedDelegate == null)) {
                this.onPullFromQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPullFromQueueCompleted);
            }
            base.InvokeAsync(this.onBeginPullFromQueueDelegate, new object[] {
                        id,
                        recruiterUri}, this.onEndPullFromQueueDelegate, this.onPullFromQueueCompletedDelegate, userState);
        }
        
        public void RecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId) {
            base.Channel.RecruiterDialOut(recruiterUri, jobNumber, numberToDial, callbackId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecruiterDialOut(string recruiterUri, string jobNumber, string numberToDial, int callbackId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecruiterDialOut(recruiterUri, jobNumber, numberToDial, callbackId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRecruiterDialOut(System.IAsyncResult result) {
            base.Channel.EndRecruiterDialOut(result);
        }
        
        private System.IAsyncResult OnBeginRecruiterDialOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string recruiterUri = ((string)(inValues[0]));
            string jobNumber = ((string)(inValues[1]));
            string numberToDial = ((string)(inValues[2]));
            int callbackId = ((int)(inValues[3]));
            return this.BeginRecruiterDialOut(recruiterUri, jobNumber, numberToDial, callbackId, callback, asyncState);
        }
        
        private object[] OnEndRecruiterDialOut(System.IAsyncResult result) {
            this.EndRecruiterDialOut(result);
            return null;
        }
        
        private void OnRecruiterDialOutCompleted(object state) {
            if ((this.RecruiterDialOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecruiterDialOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecruiterDialOutAsync(string recruiterUri, string jobNumber, string numberToDial, int callbackId) {
            this.RecruiterDialOutAsync(recruiterUri, jobNumber, numberToDial, callbackId, null);
        }
        
        public void RecruiterDialOutAsync(string recruiterUri, string jobNumber, string numberToDial, int callbackId, object userState) {
            if ((this.onBeginRecruiterDialOutDelegate == null)) {
                this.onBeginRecruiterDialOutDelegate = new BeginOperationDelegate(this.OnBeginRecruiterDialOut);
            }
            if ((this.onEndRecruiterDialOutDelegate == null)) {
                this.onEndRecruiterDialOutDelegate = new EndOperationDelegate(this.OnEndRecruiterDialOut);
            }
            if ((this.onRecruiterDialOutCompletedDelegate == null)) {
                this.onRecruiterDialOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecruiterDialOutCompleted);
            }
            base.InvokeAsync(this.onBeginRecruiterDialOutDelegate, new object[] {
                        recruiterUri,
                        jobNumber,
                        numberToDial,
                        callbackId}, this.onEndRecruiterDialOutDelegate, this.onRecruiterDialOutCompletedDelegate, userState);
        }
        
        public void TransferCall(string id, string recruiterUri) {
            base.Channel.TransferCall(id, recruiterUri);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTransferCall(string id, string recruiterUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransferCall(id, recruiterUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTransferCall(System.IAsyncResult result) {
            base.Channel.EndTransferCall(result);
        }
        
        private System.IAsyncResult OnBeginTransferCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string recruiterUri = ((string)(inValues[1]));
            return this.BeginTransferCall(id, recruiterUri, callback, asyncState);
        }
        
        private object[] OnEndTransferCall(System.IAsyncResult result) {
            this.EndTransferCall(result);
            return null;
        }
        
        private void OnTransferCallCompleted(object state) {
            if ((this.TransferCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransferCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransferCallAsync(string id, string recruiterUri) {
            this.TransferCallAsync(id, recruiterUri, null);
        }
        
        public void TransferCallAsync(string id, string recruiterUri, object userState) {
            if ((this.onBeginTransferCallDelegate == null)) {
                this.onBeginTransferCallDelegate = new BeginOperationDelegate(this.OnBeginTransferCall);
            }
            if ((this.onEndTransferCallDelegate == null)) {
                this.onEndTransferCallDelegate = new EndOperationDelegate(this.OnEndTransferCall);
            }
            if ((this.onTransferCallCompletedDelegate == null)) {
                this.onTransferCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransferCallCompleted);
            }
            base.InvokeAsync(this.onBeginTransferCallDelegate, new object[] {
                        id,
                        recruiterUri}, this.onEndTransferCallDelegate, this.onTransferCallCompletedDelegate, userState);
        }
        
        public void SilentMonitorCall(string id, string sipAddress) {
            base.Channel.SilentMonitorCall(id, sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSilentMonitorCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSilentMonitorCall(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSilentMonitorCall(System.IAsyncResult result) {
            base.Channel.EndSilentMonitorCall(result);
        }
        
        private System.IAsyncResult OnBeginSilentMonitorCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return this.BeginSilentMonitorCall(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndSilentMonitorCall(System.IAsyncResult result) {
            this.EndSilentMonitorCall(result);
            return null;
        }
        
        private void OnSilentMonitorCallCompleted(object state) {
            if ((this.SilentMonitorCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SilentMonitorCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SilentMonitorCallAsync(string id, string sipAddress) {
            this.SilentMonitorCallAsync(id, sipAddress, null);
        }
        
        public void SilentMonitorCallAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginSilentMonitorCallDelegate == null)) {
                this.onBeginSilentMonitorCallDelegate = new BeginOperationDelegate(this.OnBeginSilentMonitorCall);
            }
            if ((this.onEndSilentMonitorCallDelegate == null)) {
                this.onEndSilentMonitorCallDelegate = new EndOperationDelegate(this.OnEndSilentMonitorCall);
            }
            if ((this.onSilentMonitorCallCompletedDelegate == null)) {
                this.onSilentMonitorCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSilentMonitorCallCompleted);
            }
            base.InvokeAsync(this.onBeginSilentMonitorCallDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndSilentMonitorCallDelegate, this.onSilentMonitorCallCompletedDelegate, userState);
        }
        
        public void BargeIntoCall(string id, string sipAddress) {
            base.Channel.BargeIntoCall(id, sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBargeIntoCall(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBargeIntoCall(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndBargeIntoCall(System.IAsyncResult result) {
            base.Channel.EndBargeIntoCall(result);
        }
        
        private System.IAsyncResult OnBeginBargeIntoCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return this.BeginBargeIntoCall(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndBargeIntoCall(System.IAsyncResult result) {
            this.EndBargeIntoCall(result);
            return null;
        }
        
        private void OnBargeIntoCallCompleted(object state) {
            if ((this.BargeIntoCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BargeIntoCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BargeIntoCallAsync(string id, string sipAddress) {
            this.BargeIntoCallAsync(id, sipAddress, null);
        }
        
        public void BargeIntoCallAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginBargeIntoCallDelegate == null)) {
                this.onBeginBargeIntoCallDelegate = new BeginOperationDelegate(this.OnBeginBargeIntoCall);
            }
            if ((this.onEndBargeIntoCallDelegate == null)) {
                this.onEndBargeIntoCallDelegate = new EndOperationDelegate(this.OnEndBargeIntoCall);
            }
            if ((this.onBargeIntoCallCompletedDelegate == null)) {
                this.onBargeIntoCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBargeIntoCallCompleted);
            }
            base.InvokeAsync(this.onBeginBargeIntoCallDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndBargeIntoCallDelegate, this.onBargeIntoCallCompletedDelegate, userState);
        }
        
        public void DispatchCallInQueue(string id, string sipAddress) {
            base.Channel.DispatchCallInQueue(id, sipAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDispatchCallInQueue(string id, string sipAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDispatchCallInQueue(id, sipAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDispatchCallInQueue(System.IAsyncResult result) {
            base.Channel.EndDispatchCallInQueue(result);
        }
        
        private System.IAsyncResult OnBeginDispatchCallInQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string sipAddress = ((string)(inValues[1]));
            return this.BeginDispatchCallInQueue(id, sipAddress, callback, asyncState);
        }
        
        private object[] OnEndDispatchCallInQueue(System.IAsyncResult result) {
            this.EndDispatchCallInQueue(result);
            return null;
        }
        
        private void OnDispatchCallInQueueCompleted(object state) {
            if ((this.DispatchCallInQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DispatchCallInQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DispatchCallInQueueAsync(string id, string sipAddress) {
            this.DispatchCallInQueueAsync(id, sipAddress, null);
        }
        
        public void DispatchCallInQueueAsync(string id, string sipAddress, object userState) {
            if ((this.onBeginDispatchCallInQueueDelegate == null)) {
                this.onBeginDispatchCallInQueueDelegate = new BeginOperationDelegate(this.OnBeginDispatchCallInQueue);
            }
            if ((this.onEndDispatchCallInQueueDelegate == null)) {
                this.onEndDispatchCallInQueueDelegate = new EndOperationDelegate(this.OnEndDispatchCallInQueue);
            }
            if ((this.onDispatchCallInQueueCompletedDelegate == null)) {
                this.onDispatchCallInQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDispatchCallInQueueCompleted);
            }
            base.InvokeAsync(this.onBeginDispatchCallInQueueDelegate, new object[] {
                        id,
                        sipAddress}, this.onEndDispatchCallInQueueDelegate, this.onDispatchCallInQueueCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProdServiceReference.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IO.Stream GetSilverlightPolicy();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndGetSilverlightPolicy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IO.Stream GetFlashPolicy();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndGetFlashPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : Phonelogic.Alert.ProdServiceReference.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSilverlightPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSilverlightPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlashPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlashPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<Phonelogic.Alert.ProdServiceReference.IPolicyRetriever>, Phonelogic.Alert.ProdServiceReference.IPolicyRetriever {
        
        private BeginOperationDelegate onBeginGetSilverlightPolicyDelegate;
        
        private EndOperationDelegate onEndGetSilverlightPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetSilverlightPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlashPolicyDelegate;
        
        private EndOperationDelegate onEndGetFlashPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlashPolicyCompletedDelegate;
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetSilverlightPolicyCompletedEventArgs> GetSilverlightPolicyCompleted;
        
        public event System.EventHandler<GetFlashPolicyCompletedEventArgs> GetFlashPolicyCompleted;
        
        public System.IO.Stream GetSilverlightPolicy() {
            return base.Channel.GetSilverlightPolicy();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndGetSilverlightPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetSilverlightPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetSilverlightPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetSilverlightPolicy(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndGetSilverlightPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSilverlightPolicyCompleted(object state) {
            if ((this.GetSilverlightPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSilverlightPolicyCompleted(this, new GetSilverlightPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSilverlightPolicyAsync() {
            this.GetSilverlightPolicyAsync(null);
        }
        
        public void GetSilverlightPolicyAsync(object userState) {
            if ((this.onBeginGetSilverlightPolicyDelegate == null)) {
                this.onBeginGetSilverlightPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetSilverlightPolicy);
            }
            if ((this.onEndGetSilverlightPolicyDelegate == null)) {
                this.onEndGetSilverlightPolicyDelegate = new EndOperationDelegate(this.OnEndGetSilverlightPolicy);
            }
            if ((this.onGetSilverlightPolicyCompletedDelegate == null)) {
                this.onGetSilverlightPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSilverlightPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetSilverlightPolicyDelegate, null, this.onEndGetSilverlightPolicyDelegate, this.onGetSilverlightPolicyCompletedDelegate, userState);
        }
        
        public System.IO.Stream GetFlashPolicy() {
            return base.Channel.GetFlashPolicy();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlashPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndGetFlashPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetFlashPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetFlashPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetFlashPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetFlashPolicy(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndGetFlashPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlashPolicyCompleted(object state) {
            if ((this.GetFlashPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlashPolicyCompleted(this, new GetFlashPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlashPolicyAsync() {
            this.GetFlashPolicyAsync(null);
        }
        
        public void GetFlashPolicyAsync(object userState) {
            if ((this.onBeginGetFlashPolicyDelegate == null)) {
                this.onBeginGetFlashPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetFlashPolicy);
            }
            if ((this.onEndGetFlashPolicyDelegate == null)) {
                this.onEndGetFlashPolicyDelegate = new EndOperationDelegate(this.OnEndGetFlashPolicy);
            }
            if ((this.onGetFlashPolicyCompletedDelegate == null)) {
                this.onGetFlashPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlashPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlashPolicyDelegate, null, this.onEndGetFlashPolicyDelegate, this.onGetFlashPolicyCompletedDelegate, userState);
        }
    }
}
